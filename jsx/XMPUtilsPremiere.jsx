/** * $_ext_PHXS_XMP - XMPUtilsPremiere.jsx * * @category   CreativeWorx * @package    Extension * @copyright  Copyright (c) 2014 CreativeWorx Corp. (http://www.creativeworx.com) * @license    All rights reserved. */if (ExternalObject.AdobeXMPScript == undefined) ExternalObject.AdobeXMPScript = new ExternalObject("lib:AdobeXMPScript");var file;var CWFileName = "TTTracked.png";var CWFileIndex = -1;var namefield = "Column.Intrinsic.Name";var cwprojectidfield = "Column.PropertyText.Description";var kPProPrivateProjectMetadataURI = "http://ns.adobe.com/premierePrivateProjectMetaData/1.0/";var delimiter;var trackingFile;var fileName="TTTracked.png";if(Folder.fs=="Macintosh")	delimiter='/'else	delimiter='\\';$._ext_PPRO_XMP = {	/*		Gets Current Document's XMP data for project id.	*/initTT:function() {	var result = findCWFileAndProjectInfo();	for (var i in result) {		$.writeln(i + " : " + result[i]);	}	//$.writeln(result.cwindex);	if (result.error){		importCWFile();        //Assume:imported file always inserted in the end, NEED TO VERIFY		CWFileIndex = app.project.rootItem.children.noOfChildren - 1;        }	else if (result["cwindex"] >= 0) {		CWFileIndex = result.cwindex;		$.writeln("CWFileindex" + CWFileindex);		if (result.CWProjectId) {			selectProject(result.CWProjectId);		}	}},	getProjectDetails: function() {		//1. find the child index		var result;		if (CWFileIndex >= 0) {			//2. Check if it is still the same			if (verifyCWFile(CWFileIndex)) {				//File is still the same, so just 				//insert the project id				return readProjectInfo();			} else {				//Find the file, if not exist create it.				findCWFileOrCreateNew();				//insert the project id				return readProjectInfo();			}		} else {			//Find the file, it not exist create it.			findCWFileOrCreateNew();			//insert the project id			return readProjectInfo();		}	},	removeXMP: function() {		assignCWProject("");	},	insertXMP: function(value) {		assignCWProject(value);	},	stampCurrentDoc: function() {	},	getCurrentDocumentName: function() {		var name = "";		//EXTRACT THE NAME OF THE PROJECT		try{			var path=app.project.path;			var namestStartingIndex=path.lastIndexOf(delimiter)+1;			return path.substr(namestStartingIndex);		}		catch(e){			return name;		}	},	getCurrentDocumentTimeStamp: function() {			},	getDetails: function() {		var projectName;		try {			projectName = this.getCurrentDocumentName();		} catch (e) {			projectName = "";		}		return '{"projectID":"' + this.getProjectID() + '",' +			'"instanceID":"' + this.getInstanceID() + '",' +			'"originalID":"' + this.getOriginalID() + '",' +			'"docName":"' + projectName + '",' +			'"docPath":"' + this.getFilePath() + '",' +			'"docID":"' + this.getDocumentID() + '"}';	},	getFilePath: function() {		var path;		try {			var path=app.project.path;		} catch (e) {			path = '';		}		return path;	},	getProjectID: function() {		this.getProjectDetails();	},	getInstanceID: function() {		return "";	},	getOriginalID: function() {		return "";	},	getDocumentID: function() {		var value = '';		try{			return app.project.documentID;		}		catch(e){			return '';		}		},	getHistoryStates: function() {		},	setTrackerFilePath:function(path){		trackingFile=[path+fileName];	}};function selectProject(projectid) {	//alert(projectid + " selected !");}function importCWFile() {	//file = ["/Users/parikshan/Desktop/TTTracked.png"];	app.project.importFiles(trackingFile);	findCWFileAndProjectInfo();}function readProjectInfo() {	var xmp = new XMPMeta(app.project.rootItem.children[CWFileIndex].getProjectMetadata());	var result = "";	if (xmp.doesPropertyExist(kPProPrivateProjectMetadataURI, cwprojectidfield)) {		var desc = xmp.getProperty(kPProPrivateProjectMetadataURI, cwprojectidfield).value;		if (desc.substr(0, 2) == "CW") {			result = desc.substr(2);		}	}	return result;}function findCWFileAndProjectInfo() {	var noOfChildren = app.project.rootItem.children.numItems;	var kPProPrivateProjectMetadataURI = "http://ns.adobe.com/premierePrivateProjectMetaData/1.0/";	var item;	var xmp;	var namefield = "Column.Intrinsic.Name";	var nameProp;	var result = new Object();	for (var i = 0; i < noOfChildren; i++) {		item = app.project.rootItem.children[i];		xmp = new XMPMeta(item.getProjectMetadata());		if (xmp.doesPropertyExist(kPProPrivateProjectMetadataURI, namefield)) {			nameProp = xmp.getProperty(kPProPrivateProjectMetadataURI, namefield);			if (nameProp.value == CWFileName) {				result["cwindex"] = i;				if (xmp.doesPropertyExist(kPProPrivateProjectMetadataURI, cwprojectidfield)) {					var desc = xmp.getProperty(kPProPrivateProjectMetadataURI, cwprojectidfield).value;					if (desc.substr(0, 2) == "CW") {						result["CWProjectId"] = desc.substr(2);					}				}				return result;			}		}		//xmp.doesProper	}	result["error"] = "file not found";	return result;}function assignCWProject(CWprojectId) {	//1. find the child index	if (CWFileIndex >= 0) {		//2. Check if it is still the same		if (verifyCWFile(CWFileIndex)) {			//File is still the same, so just 			//insert the project id			insertProjectIdIntoCWFile(CWprojectId);		} else {			//Find the file, if not exist create it.			findCWFileOrCreateNew();			//insert the project id			insertProjectIdIntoCWFile(CWprojectId);		}	} else {		//Find the file, it not exist create it.		findCWFileOrCreateNew();		//insert the project id		insertProjectIdIntoCWFile(CWprojectId);	}}function verifyCWFile(index) {	//check if the index of CW file is same.	var kPProPrivateProjectMetadataURI = "http://ns.adobe.com/premierePrivateProjectMetaData/1.0/";	var item;	var xmp;	var namefield = "Column.Intrinsic.Name";	try {		//$.writeln(index);		item = app.project.rootItem.children[index];		xmp = new XMPMeta(item.getProjectMetadata());		if (xmp.doesPropertyExist(kPProPrivateProjectMetadataURI, namefield)) {			nameProp = xmp.getProperty(kPProPrivateProjectMetadataURI, namefield);			if (nameProp.value == CWFileName) {				return true;			}			return false;		}		return false;	} catch (e) {		//$.writeln(e.message);		return false;	}}function findCWFileOrCreateNew() {	var result = findCWFileAndProjectInfo();	if (result.error) {		importCWFile();		//Assume:imported file always inserted in the end, NEED TO VERIFY		CWFileIndex = app.project.rootItem.children.noOfChildren - 1;		return true;	} else {		CWFileIndex=result["cwindex"];		return true;	}}function insertProjectIdIntoCWFile(CWProjectId) {	var item = app.project.rootItem.children[CWFileIndex];	var kPProPrivateProjectMetadataURI = "http://ns.adobe.com/premierePrivateProjectMetaData/1.0/";	var xmp = new XMPMeta(item.getProjectMetadata());	var obj = xmp.dumpObject();	var namespaces = XMPMeta.dumpNamespaces();	var projectIdToWrite = "CW" + CWProjectId;	xmp.setProperty(kPProPrivateProjectMetadataURI, cwprojectidfield, projectIdToWrite);	var str = xmp.serialize();	var array = new Array();	array[0] = cwprojectidfield;	item.setProjectMetadata(str, array);}